// Code generated by goctl. DO NOT EDIT.
// Source: grpc_user_query.proto

package userquery

import (
	"context"

	"github.com/wuyazi/grpc_user_domain/user_domain"
	"github.com/wuyazi/grpc_user_query/user_query"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetByUserIdReq = user_query.GetByUserIdReq
	UserCreated    = user_domain.UserCreated
	UserResp       = user_query.UserResp

	UserQuery interface {
		InsertUser(ctx context.Context, in *UserCreated, opts ...grpc.CallOption) (*UserResp, error)
		GetByUserId(ctx context.Context, in *GetByUserIdReq, opts ...grpc.CallOption) (*UserResp, error)
	}

	defaultUserQuery struct {
		cli zrpc.Client
	}
)

func NewUserQuery(cli zrpc.Client) UserQuery {
	return &defaultUserQuery{
		cli: cli,
	}
}

func (m *defaultUserQuery) InsertUser(ctx context.Context, in *UserCreated, opts ...grpc.CallOption) (*UserResp, error) {
	client := user_query.NewUserQueryClient(m.cli.Conn())
	return client.InsertUser(ctx, in, opts...)
}

func (m *defaultUserQuery) GetByUserId(ctx context.Context, in *GetByUserIdReq, opts ...grpc.CallOption) (*UserResp, error) {
	client := user_query.NewUserQueryClient(m.cli.Conn())
	return client.GetByUserId(ctx, in, opts...)
}
